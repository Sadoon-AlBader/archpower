--- mozilla-unified/memory/build/mozjemalloc.cpp.orig	2019-02-28 07:39:08.000000000 +0000
+++ mozilla-unified/memory/build/mozjemalloc.cpp	2019-02-28 07:39:30.000000000 +0000
@@ -182,7 +182,7 @@
 // Debug builds are opted out too, for test coverage.
 #ifndef MOZ_DEBUG
 #if !defined(__ia64__) && !defined(__sparc__) && !defined(__mips__) && \
-    !defined(__aarch64__)
+    !defined(__aarch64__) && !defined(__powerpc__)
 #define MALLOC_STATIC_PAGESIZE 1
 #endif
 #endif
--- mozilla-unified/security/nss/lib/freebl/mpi/mpcpucache.c.orig	2019-03-01 07:33:16.000000000 +0000
+++ mozilla-unified/security/nss/lib/freebl/mpi/mpcpucache.c	2019-03-01 08:08:20.000000000 +0000
@@ -727,9 +727,12 @@
 dcbzl(char *array)
 {
     register char *a asm("r2") = array;
-    __asm__ __volatile__("dcbzl %0,r0"
-                         : "=r"(a)
-                         : "0"(a));
+    /* some older assemblers won't understand the dcbzl instruction
+     * variant, so we directly emit the instruction ourselves */
+     __asm__ __volatile__("mr 9, %0 ; .long 0x7C204FEC" /*dcbzl 0,9*/
+                          : /*out*/
+                          : "r" (a) /*in*/
+                          : "memory", "r9" /*clobber*/);
 }
 
 #define PPC_DO_ALIGN(x, y) ((char *)((((long long)(x)) + ((y)-1)) & ~((y)-1)))
--- mozilla-unified/xpcom/reflect/xptcall/md/unix/xptcinvoke_asm_ppc64_linux.S.orig	2019-03-01 09:54:34.000000000 +0000
+++ mozilla-unified/xpcom/reflect/xptcall/md/unix/xptcinvoke_asm_ppc64_linux.S	2019-03-01 10:02:24.000000000 +0000
@@ -62,11 +62,11 @@
 .NS_InvokeByIndex:
 #endif
         mflr    0
-        std     0,16(r1)
+        std     0,16(%r1)
 
-        std     r29,-24(r1)
-        std     r30,-16(r1)
-        std     r31,-8(r1)
+        std     r29,-24(%r1)
+        std     r30,-16(%r1)
+        std     r31,-8(%r1)
 
         mr      r29,r3                  # Save 'that' in r29
         mr      r30,r4                  # Save 'methodIndex' in r30
@@ -79,7 +79,7 @@
         #
         #  | (fixed area + |                | 7 GP | 13 FP | 3 NV |
         #  |  param. save) |(params)........| regs | regs  | regs |
-        # (r1)......(+STACK_PARAMS)...  (-23*8).(-16*8).(-3*8)..(r31)
+        # (%r1)......(+STACK_PARAMS)...  (-23*8).(-16*8).(-3*8)..(%r31)
 
         # +stack frame, -unused stack params, +regs storage, +1 for alignment
         addi    r7,r5,((STACK_PARAMS/8)-7+7+13+3+1)
@@ -105,14 +105,14 @@
 
         # Set up to invoke function
 
-        ld      r9,0(r29)               # vtable (r29 is 'that')
+        ld      r9,0(%r29)               # vtable (r29 is 'that')
         mr      r3,r29                  # self is first arg, obviously
 
         sldi    r30,r30,3               # Find function descriptor 
         add     r9,r9,r30
-        ld      r12,0(r9)
+        ld      r12,0(%r9)
 
-        std     r2,STACK_TOC(r1)        # Save r2 (TOC pointer)
+        std     r2,STACK_TOC(%r1)        # Save r2 (TOC pointer)
 
 #if _CALL_ELF == 2
         mtctr   r12
@@ -124,36 +124,36 @@
 #endif
 
         # Load FP and GP registers as required
-        ld      r4, -(23*8)(r31) 
-        ld      r5, -(22*8)(r31) 
-        ld      r6, -(21*8)(r31) 
-        ld      r7, -(20*8)(r31) 
-        ld      r8, -(19*8)(r31) 
-        ld      r9, -(18*8)(r31) 
-        ld      r10, -(17*8)(r31) 
-
-        lfd     f1, -(16*8)(r31)
-        lfd     f2, -(15*8)(r31)
-        lfd     f3, -(14*8)(r31)
-        lfd     f4, -(13*8)(r31)
-        lfd     f5, -(12*8)(r31)
-        lfd     f6, -(11*8)(r31)
-        lfd     f7, -(10*8)(r31)
-        lfd     f8, -(9*8)(r31)
-        lfd     f9, -(8*8)(r31)
-        lfd     f10, -(7*8)(r31)
-        lfd     f11, -(6*8)(r31)
-        lfd     f12, -(5*8)(r31)
-        lfd     f13, -(4*8)(r31)
+        ld      r4, -(23*8)(%r31) 
+        ld      r5, -(22*8)(%r31) 
+        ld      r6, -(21*8)(%r31) 
+        ld      r7, -(20*8)(%r31) 
+        ld      r8, -(19*8)(%r31) 
+        ld      r9, -(18*8)(%r31) 
+        ld      r10, -(17*8)(%r31) 
+
+        lfd     f1, -(16*8)(%r31)
+        lfd     f2, -(15*8)(%r31)
+        lfd     f3, -(14*8)(%r31)
+        lfd     f4, -(13*8)(%r31)
+        lfd     f5, -(12*8)(%r31)
+        lfd     f6, -(11*8)(%r31)
+        lfd     f7, -(10*8)(%r31)
+        lfd     f8, -(9*8)(%r31)
+        lfd     f9, -(8*8)(%r31)
+        lfd     f10, -(7*8)(%r31)
+        lfd     f11, -(6*8)(%r31)
+        lfd     f12, -(5*8)(%r31)
+        lfd     f13, -(4*8)(%r31)
 
         bctrl                           # Do it
 
-        ld      r2,STACK_TOC(r1)        # Load our own TOC pointer
-        ld      r1,0(r1)                # Revert stack frame
-        ld      0,16(r1)                # Reload lr
-        ld      29,-24(r1)              # Restore NVGPRS
-        ld      30,-16(r1)
-        ld      31,-8(r1)
+        ld      r2,STACK_TOC(%r1)        # Load our own TOC pointer
+        ld      r1,0(%r1)                # Revert stack frame
+        ld      0,16(%r1)                # Reload lr
+        ld      29,-24(%r1)              # Restore NVGPRS
+        ld      30,-16(%r1)
+        ld      31,-8(%r1)
         mtlr    0
         blr
 
