--- mozilla-unified/memory/build/mozjemalloc.cpp.orig	2019-02-28 07:39:08.000000000 +0000
+++ mozilla-unified/memory/build/mozjemalloc.cpp	2019-02-28 07:39:30.000000000 +0000
@@ -182,7 +182,7 @@
 // Debug builds are opted out too, for test coverage.
 #ifndef MOZ_DEBUG
 #if !defined(__ia64__) && !defined(__sparc__) && !defined(__mips__) && \
-    !defined(__aarch64__)
+    !defined(__aarch64__) && !defined(__powerpc__)
 #define MALLOC_STATIC_PAGESIZE 1
 #endif
 #endif
--- mozilla-unified/security/nss/lib/freebl/mpi/mpcpucache.c.orig	2019-03-01 07:33:16.000000000 +0000
+++ mozilla-unified/security/nss/lib/freebl/mpi/mpcpucache.c	2019-03-01 08:08:20.000000000 +0000
@@ -727,9 +727,12 @@
 dcbzl(char *array)
 {
     register char *a asm("r2") = array;
-    __asm__ __volatile__("dcbzl %0,r0"
-                         : "=r"(a)
-                         : "0"(a));
+    /* some older assemblers won't understand the dcbzl instruction
+     * variant, so we directly emit the instruction ourselves */
+     __asm__ __volatile__("mr 9, %0 ; .long 0x7C204FEC" /*dcbzl 0,9*/
+                          : /*out*/
+                          : "r" (a) /*in*/
+                          : "memory", "r9" /*clobber*/);
 }
 
 #define PPC_DO_ALIGN(x, y) ((char *)((((long long)(x)) + ((y)-1)) & ~((y)-1)))
--- mozilla-unified/xpcom/reflect/xptcall/md/unix/xptcstubs_asm_ppc64_linux.S.orig	2019-03-18 11:00:03.847370287 +0000
+++ mozilla-unified/xpcom/reflect/xptcall/md/unix/xptcstubs_asm_ppc64_linux.S	2019-03-18 11:07:58.285691290 +0000
@@ -58,35 +58,35 @@
 #endif
         mflr    r0
 
-        std     r4, -56(r1)                     # Save all GPRS
-        std     r5, -48(r1)
-        std     r6, -40(r1)
-        std     r7, -32(r1)
-        std     r8, -24(r1)
-        std     r9, -16(r1)
-        std     r10, -8(r1)
-
-        stfd    f13, -64(r1)                    # ... and FPRS
-        stfd    f12, -72(r1)
-        stfd    f11, -80(r1)
-        stfd    f10, -88(r1)
-        stfd    f9, -96(r1)
-        stfd    f8, -104(r1)
-        stfd    f7, -112(r1)
-        stfd    f6, -120(r1)
-        stfd    f5, -128(r1)
-        stfd    f4, -136(r1)
-        stfd    f3, -144(r1)
-        stfd    f2, -152(r1)
-        stfd    f1, -160(r1)
+        std     r4, -56(%r1)                     # Save all GPRS
+        std     r5, -48(%r1)
+        std     r6, -40(%r1)
+        std     r7, -32(%r1)
+        std     r8, -24(%r1)
+        std     r9, -16(%r1)
+        std     r10, -8(%r1)
+
+        stfd    f13, -64(%r1)                    # ... and FPRS
+        stfd    f12, -72(%r1)
+        stfd    f11, -80(%r1)
+        stfd    f10, -88(%r1)
+        stfd    f9, -96(%r1)
+        stfd    f8, -104(%r1)
+        stfd    f7, -112(%r1)
+        stfd    f6, -120(%r1)
+        stfd    f5, -128(%r1)
+        stfd    f4, -136(%r1)
+        stfd    f3, -144(%r1)
+        stfd    f2, -152(%r1)
+        stfd    f1, -160(%r1)
 
         subi    r6,r1,56                        # r6 --> gprData
         subi    r7,r1,160                       # r7 --> fprData
         addi    r5,r1,STACK_PARAMS              # r5 --> extra stack args
 
-        std     r0, 16(r1)
+        std     r0, 16(%r1)
 	
-        stdu    r1,-288(r1)
+        stdu    r1,-288(%r1)
                                                 # r3 has the 'self' pointer
                                                 # already
 
@@ -97,8 +97,8 @@
         bl      PrepareAndDispatch
         nop
 
-        ld      1,0(r1)                         # restore stack
-        ld      r0,16(r1)                       # restore LR
+        ld      1,0(%r1)                         # restore stack
+        ld      r0,16(%r1)                       # restore LR
         mtlr    r0
         blr
 
