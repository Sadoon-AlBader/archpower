diff -ruN libical-3.0.8.orig/src/libical/icalrecur.c libical-3.0.8/src/libical/icalrecur.c
--- libical-3.0.8.orig/src/libical/icalrecur.c	2020-10-31 10:53:19.432489870 +0100
+++ libical-3.0.8/src/libical/icalrecur.c	2020-10-31 16:32:45.813385846 +0100
@@ -1018,7 +1018,7 @@
 
     calendars = icalarray_new(sizeof(const char **), 20);
 
-    en = ucal_getKeywordValuesForLocale("calendar", NULL, FALSE, &status);
+    en = ucal_getKeywordValuesForLocale("calendar", NULL, false, &status);
     while ((cal = uenum_next(en, NULL, &status))) {
         cal = icalmemory_tmp_copy(cal);
         icalarray_append(calendars, &cal);
@@ -1411,7 +1411,7 @@
         }
 
         /* Check if specified calendar is supported */
-        en = ucal_getKeywordValuesForLocale("calendar", NULL, FALSE, &status);
+        en = ucal_getKeywordValuesForLocale("calendar", NULL, false, &status);
         while ((cal = uenum_next(en, NULL, &status))) {
             if (!strcmp(cal, rule.rscale)) {
                 is_hebrew = !strcmp(rule.rscale, "hebrew");
diff -ruN libical-3.0.8.orig/src/libical/icalvalue.c libical-3.0.8/src/libical/icalvalue.c
--- libical-3.0.8.orig/src/libical/icalvalue.c	2020-10-31 10:53:19.433489768 +0100
+++ libical-3.0.8/src/libical/icalvalue.c	2020-10-31 16:32:45.816385531 +0100
@@ -473,9 +473,9 @@
         }
     case ICAL_BOOLEAN_VALUE:
         {
-            if (!strcmp(str, "TRUE")) {
+            if (!strcmp(str, "true")) {
                 value = icalvalue_new_boolean(1);
-            } else if (!strcmp(str, "FALSE")) {
+            } else if (!strcmp(str, "false")) {
                 value = icalvalue_new_boolean(0);
             } else if (error != 0) {
                 char temp[TMP_BUF_SIZE];
@@ -856,7 +856,7 @@
 
     data = icalvalue_get_integer(value);
 
-    strcpy(str, data ? "TRUE" : "FALSE");
+    strcpy(str, data ? "true" : "false");
 
     return str;
 }
diff -ruN libical-3.0.8.orig/src/libicalss/icalfileset.c libical-3.0.8/src/libicalss/icalfileset.c
--- libical-3.0.8.orig/src/libicalss/icalfileset.c	2020-10-31 10:53:19.434489667 +0100
+++ libical-3.0.8/src/libicalss/icalfileset.c	2020-10-31 16:32:45.819385217 +0100
@@ -373,7 +373,7 @@
 
         wtmp = wce_mbtowc(tmp);
 
-        if (CreateProcess(wtmp, L"", NULL, NULL, FALSE, 0, NULL, NULL, NULL, &pi)) {
+        if (CreateProcess(wtmp, L"", NULL, NULL, false, 0, NULL, NULL, NULL, &pi)) {
 #endif
             icalerror_set_errno(ICAL_FILE_ERROR);
             return ICAL_FILE_ERROR;
diff -ruN libical-3.0.8.orig/src/Net-ICal-Libical/netical_wrap.c libical-3.0.8/src/Net-ICal-Libical/netical_wrap.c
--- libical-3.0.8.orig/src/Net-ICal-Libical/netical_wrap.c	2020-10-31 10:53:19.427490376 +0100
+++ libical-3.0.8/src/Net-ICal-Libical/netical_wrap.c	2020-10-31 16:32:45.826384483 +0100
@@ -441,7 +441,7 @@
 static void _swig_setiv(CPerl *pPerl, char *name, long value) { 
 #endif
      SV *sv; 
-     sv = perl_get_sv(name,TRUE | 0x2);
+     sv = perl_get_sv(name,true | 0x2);
      sv_setiv(sv, (IV) value);
      SvREADONLY_on(sv);
 }
@@ -454,7 +454,7 @@
 static void _swig_setpv(CPerl *pPerl, char *name, char *value) { 
 #endif
      SV *sv; 
-     sv = perl_get_sv(name,TRUE | 0x2);
+     sv = perl_get_sv(name,true | 0x2);
      sv_setpv(sv, value);
      SvREADONLY_on(sv);
 }
diff -ruN libical-3.0.8.orig/src/test/regression.c libical-3.0.8/src/test/regression.c
--- libical-3.0.8.orig/src/test/regression.c	2020-10-31 10:53:19.438489262 +0100
+++ libical-3.0.8/src/test/regression.c	2020-10-31 16:32:45.829384169 +0100
@@ -194,13 +194,13 @@
 
     v = icalvalue_new_boolean(0);
     int_is("icalvalue_new_boolean(0)", icalvalue_get_boolean(v), 0);
-    str_is("icalvalue_as_ical_string()", icalvalue_as_ical_string(v), "FALSE");
+    str_is("icalvalue_as_ical_string()", icalvalue_as_ical_string(v), "false");
     icalvalue_set_boolean(v, 2);
     ok("icalvalue_set_boolean(2)", (2 == icalvalue_get_boolean(v)));
-    str_is("icalvalue_as_ical_string()", icalvalue_as_ical_string(v), "TRUE");
+    str_is("icalvalue_as_ical_string()", icalvalue_as_ical_string(v), "true");
 
     copy = icalvalue_new_clone(v);
-    str_is("icalvalue_new_clone()", icalvalue_as_ical_string(copy), "TRUE");
+    str_is("icalvalue_new_clone()", icalvalue_as_ical_string(copy), "true");
 
     icalvalue_free(v);
     icalvalue_free(copy);
