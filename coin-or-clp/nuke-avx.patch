--- Clp-1.17.3/Clp/src/CoinAbcHelperFunctions.hpp.orig	2019-05-28 19:30:45.720000000 +0000
+++ Clp-1.17.3/Clp/src/CoinAbcHelperFunctions.hpp	2019-05-28 19:31:06.410000000 +0000
@@ -29,16 +29,6 @@
 #endif
 // cilk_for granularity.
 #define CILK_FOR_GRAINSIZE 128
-//#define AVX2 2
-#if AVX2 == 1
-#include "emmintrin.h"
-#elif AVX2 == 2
-#include <immintrin.h>
-#elif AVX2 == 3
-#include "avx2intrin.h"
-#endif
-//#define __AVX__ 1
-//#define __AVX2__ 1
 /**
     Note (JJF) I have added some operations on arrays even though they may
     duplicate CoinDenseVector.
--- Clp-1.17.3/Clp/src/CoinAbcHelperFunctions.cpp.orig	2019-05-28 19:28:03.010000000 +0000
+++ Clp-1.17.3/Clp/src/CoinAbcHelperFunctions.cpp	2019-05-28 19:30:31.060000000 +0000
@@ -1631,15 +1631,6 @@
 #include <stdio.h>
 #include <iostream>
 #include "CoinAbcCommonFactorization.hpp"
-#if 1
-#if AVX2 == 1
-#include "emmintrin.h"
-#elif AVX2 == 2
-#include <immintrin.h>
-#elif AVX2 == 3
-#include "avx2intrin.h"
-#endif
-#endif
 // cilk seems a bit fragile
 #define CILK_FRAGILE 0
 #if CILK_FRAGILE > 1
@@ -1989,39 +1980,6 @@
   }
 }
 #endif
-#if 0
-// From Intel site
-// get AVX intrinsics
-#include <immintrin.h>  
-// get CPUID capability  
-//#include <intrin.h>
-#define cpuid(func, ax, bx, cx, dx)                             \
-  __asm__ __volatile__("cpuid"                                  \
-                       : "=a"(ax), "=b"(bx), "=c"(cx), "=d"(dx) \
-                       : "a"(func));  
-// written for clarity, not conciseness
-#define OSXSAVEFlag (1UL << 27)
-#define AVXFlag ((1UL << 28) | OSXSAVEFlag)
-#define VAESFlag ((1UL << 25) | AVXFlag | OSXSAVEFlag)
-#define FMAFlag ((1UL << 12) | AVXFlag | OSXSAVEFlag)
-#define CLMULFlag ((1UL << 1) | AVXFlag | OSXSAVEFlag)  
-   
-bool DetectFeature(unsigned int feature)  
-{  
-  int CPUInfo[4]; //, InfoType=1, ECX = 1;  
-  //__cpuidex(CPUInfo, 1, 1);       // read the desired CPUID format  
-  cpuid(1,CPUInfo[0],CPUInfo[1],CPUInfo[2],CPUInfo[3]);
-  unsigned int ECX = CPUInfo[2];  // the output of CPUID in the ECX register.   
-  if ((ECX & feature) != feature) // Missing feature   
-    return false;
-#if 0
-  long int val = _xgetbv(0);       // read XFEATURE_ENABLED_MASK register  
-  if ((val&6) != 6)               // check OS has enabled both XMM and YMM support.  
-    return false;
-#endif
-  return true;  
-}
-#endif
 
 /* vi: softtabstop=2 shiftwidth=2 expandtab tabstop=2
 */
--- Clp-1.17.3/Clp/src/ClpSimplexDual.cpp.orig	2019-07-25 12:17:16.180000000 +0000
+++ Clp-1.17.3/Clp/src/ClpSimplexDual.cpp	2019-07-25 12:18:17.440000000 +0000
@@ -3554,14 +3554,6 @@
   }
 }
 #endif
-#ifdef _MSC_VER
-#include <intrin.h>
-#elif defined(__arm__)
-#include <arm_neon.h>
-#else
-#include <immintrin.h>
-//#include <fmaintrin.h>
-#endif
 int ClpSimplexDual::dualColumn0(const CoinIndexedVector *rowArray,
   const CoinIndexedVector *columnArray,
   CoinIndexedVector *spareArray,
--- Clp-1.17.3/Clp/src/ClpPackedMatrix.cpp.orig	2019-07-25 12:17:23.280000000 +0000
+++ Clp-1.17.3/Clp/src/ClpPackedMatrix.cpp	2019-07-25 12:17:58.950000000 +0000
@@ -6747,14 +6747,6 @@
   , ifActive_(0)
 {
 }
-#ifdef _MSC_VER
-#include <intrin.h>
-#elif defined(__arm__)
-#include <arm_neon.h>
-#else
-#include <immintrin.h>
-//#include <fmaintrin.h>
-#endif
 /* Constructor from copy. */
 ClpPackedMatrix3::ClpPackedMatrix3(ClpSimplex *model, const CoinPackedMatrix *columnCopy)
   : numberBlocks_(0)
