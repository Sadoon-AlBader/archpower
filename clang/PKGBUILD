# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>

pkgname=clang
pkgver=10.0.0rc3
pkgrel=1
pkgdesc="C language family frontend for LLVM"
arch=(x86_64 powerpc64le)
url="https://clang.llvm.org/"
license=('custom:Apache 2.0 with LLVM Exception')
depends=('llvm-libs' 'gcc' 'compiler-rt')
makedepends=('llvm' 'cmake' 'ninja' 'python-sphinx' 'python2')
optdepends=('openmp: OpenMP support in clang with -fopenmp'
            'python: for scan-view and git-clang-format'
            'llvm: referenced by some clang headers')
provides=("clang-analyzer=$pkgver" "clang-tools-extra=$pkgver")
conflicts=('clang-analyzer' 'clang-tools-extra')
replaces=('clang-analyzer' 'clang-tools-extra')

_source_base=https://releases.llvm.org/$pkgver
if [[ ${pkgver##*.} != 0 ]]; then
  _source_base=https://github.com/llvm/llvm-project/releases/download/llvmorg-${pkgver/rc/-rc}
fi

source=($_source_base/$pkgname-$pkgver.src.tar.xz{,.sig}
        $_source_base/clang-tools-extra-$pkgver.src.tar.xz{,.sig}
        $_source_base/llvm-$pkgver.src.tar.xz{,.sig}
        clang-001-fix-unwind-chain-inclusion.patch
        clang-003-ppc64-dynamic-linker-path.patch)
sha256sums=('b83a5e4065daf9a572ba604d144803968f9330873b47b26779c0256542eef1f0'
            'SKIP'
            '1968de036daf07d03df73896444548ac874ffc59df5fb0afabab7e3e124bc60c'
            'SKIP'
            '9149b451456f44bf7e5bdd8ca74c9ccac86144cc9d17dbfa0b073ccca31043dd'
            'SKIP'
            'b194d6a69450c20bdee3fe678e85288229ce169c770e2d7dc18a98527c461ef3'
            'c6a1a95d23f9bf8f54ee9563ffe17b1de70ce1f6d0dd11f2594d95adaba2b66f')
validpgpkeys+=('B6C8F98282B944E3B0D5C2530FC3042E345AD05D') # Hans Wennborg <hans@chromium.org>
validpgpkeys+=('474E22316ABF4785A88C6E8EA2C794A986419D8A') # Tom Stellard <tstellar@redhat.com>

prepare() {
  cd "$srcdir/$pkgname-$pkgver.src"

  patch -Np1 -i ${srcdir}/clang-001-fix-unwind-chain-inclusion.patch
  patch -Np1 -i ${srcdir}/clang-003-ppc64-dynamic-linker-path.patch

  mkdir -p build

  # Avoid shipping libclang-cpp before removing BUILD_SHARED_LIBS=ON
  sed -i '/add_clang_subdirectory(clang-shlib)/d' tools/CMakeLists.txt
}

build() {
  cd "$srcdir/$pkgname-$pkgver.src/build"

  # Upstream strongly recommends against BUILD_SHARED_LIBS=ON for distro
  # builds but CLANG_LINK_CLANG_DYLIB=ON is not yet supported by clang's
  # extra tools. Keep building all libraries as shared and revisit this.

  cmake .. -G Ninja \
    -DCMAKE_BUILD_TYPE=Release \
    -DCMAKE_INSTALL_PREFIX=/usr \
    -DPYTHON_EXECUTABLE=/usr/bin/python \
    -DBUILD_SHARED_LIBS=ON \
    -DLLVM_LINK_LLVM_DYLIB=ON \
    -DCLANG_LINK_CLANG_DYLIB=OFF \
    -DLLVM_ENABLE_RTTI=ON \
    -DLLVM_BUILD_TESTS=ON \
    -DLLVM_INCLUDE_DOCS=ON \
    -DLLVM_BUILD_DOCS=ON \
    -DLLVM_ENABLE_SPHINX=ON \
    -DSPHINX_WARNINGS_AS_ERRORS=OFF \
    -DLLVM_EXTERNAL_LIT=/usr/bin/lit \
    -DLLVM_MAIN_SRC_DIR="$srcdir/llvm-$pkgver.src"
  ninja ${MAKEFLAGS}
}

check() {
  cd "$srcdir/$pkgname-$pkgver.src/build"
  ninja check-clang{,-tooling} ${MAKEFLAGS}
}

_python2_optimize() {
  python2 -m compileall "$@"
  python2 -O -m compileall "$@"
}

_python3_optimize() {
  python3 -m compileall "$@"
  python3 -O -m compileall "$@"
  python3 -OO -m compileall "$@"
}

package() {
  cd "$srcdir/$pkgname-$pkgver.src/build"

  DESTDIR="$pkgdir" ninja install
  install -Dm644 ../LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"

  # Remove documentation sources
  rm -rf "$pkgdir"/usr/share/doc/clang{,-tools}/html/{_sources,.buildinfo}

  # Move analyzer scripts out of /usr/libexec
  mv "$pkgdir"/usr/libexec/{ccc,c++}-analyzer "$pkgdir/usr/lib/clang/"
  rmdir "$pkgdir/usr/libexec"
  sed -i 's|libexec|lib/clang|' "$pkgdir/usr/bin/scan-build"

  # Install Python bindings
  for _py in 2.7 3.8; do
    install -d "$pkgdir/usr/lib/python$_py/site-packages"
    cp -a ../bindings/python/clang "$pkgdir/usr/lib/python$_py/site-packages/"
    _python${_py%%.*}_optimize "$pkgdir/usr/lib/python$_py"
  done

  # Fix shebang in Python 2 script
  #sed -i '1s|/usr/bin/env python$|&2|' \
  #  "$pkgdir"/usr/share/$pkgname/run-find-all-symbols.py

  # Compile Python scripts
  _python2_optimize "$pkgdir/usr/share/clang"
  _python3_optimize "$pkgdir/usr/share" -x 'clang-include-fixer|run-find-all-symbols'
}

# vim:set ts=2 sw=2 et:
