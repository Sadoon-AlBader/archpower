--- elasticsearch-7.6.2/modules/systemd/src/main/java/org/elasticsearch/systemd/SystemdPlugin.java.orig	2020-06-03 10:42:36.940412968 +0200
+++ elasticsearch-7.6.2/modules/systemd/src/main/java/org/elasticsearch/systemd/SystemdPlugin.java	2020-06-03 10:48:09.782304365 +0200
@@ -55,25 +55,11 @@
     }
 
     SystemdPlugin(final boolean assertIsPackageDistribution, final Build.Type buildType, final String esSDNotify) {
-        final boolean isPackageDistribution = buildType == Build.Type.DEB || buildType == Build.Type.RPM;
-        if (assertIsPackageDistribution) {
-            // our build is configured to only include this module in the package distributions
-            assert isPackageDistribution : buildType;
-        }
-        if (isPackageDistribution == false) {
-            logger.debug("disabling sd_notify as the build type [{}] is not a package distribution", buildType);
-            enabled = false;
-            return;
-        }
-        logger.trace("ES_SD_NOTIFY is set to [{}]", esSDNotify);
-        if (esSDNotify == null) {
-            enabled = false;
-            return;
-        }
-        if (Boolean.TRUE.toString().equals(esSDNotify) == false && Boolean.FALSE.toString().equals(esSDNotify) == false) {
-            throw new RuntimeException("ES_SD_NOTIFY set to unexpected value [" + esSDNotify + "]");
-        }
-        enabled = Boolean.TRUE.toString().equals(esSDNotify);
+        final boolean isPackageDistribution = true;
+        
+        logger.info("systemd enabled [{}]", esSDNotify);
+
+        enabled = Boolean.TRUE.toString().equals(esSDNotify);;
     }
 
     Scheduler.Cancellable extender;
--- elasticsearch-7.6.2/distribution/build.gradle.orig	2020-06-03 10:54:41.179175507 +0200
+++ elasticsearch-7.6.2/distribution/build.gradle	2020-06-03 10:56:44.197558657 +0200
@@ -198,10 +198,6 @@
 // we create the buildOssModules task above but fill it here so we can do a single
 // loop over modules to also setup cross task dependencies and increment our modules counter
 project.rootProject.subprojects.findAll { it.parent.path == ':modules' }.each { Project module ->
-  if (module.name == 'systemd') {
-    // the systemd module is only included in the package distributions
-    return
-  }
   File licenses = new File(module.projectDir, 'licenses')
   if (licenses.exists()) {
     buildDefaultNotice.licensesDir licenses
