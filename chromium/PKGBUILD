# POWER Maintainer: Alexander Baldeck <alex.bldck@gmail.com>
# Maintainer: Evangelos Foutras <evangelos@foutrelis.com>
# Contributor: Pierre Schmitz <pierre@archlinux.de>
# Contributor: Jan "heftig" Steffens <jan.steffens@gmail.com>
# Contributor: Daniel J Griffiths <ghost1227@archlinux.us>

pkgname=chromium
pkgver=88.0.4324.182
pkgrel=1
_launcher_ver=7
_gcc_patchset=3
pkgdesc="A web browser built for speed, simplicity, and security"
arch=(x86_64 powerpc64le)
url="https://www.chromium.org/Home"
license=('BSD')
depends=('gtk3' 'nss' 'alsa-lib' 'xdg-utils' 'libxss' 'libcups' 'libgcrypt'
         'ttf-liberation' 'systemd' 'dbus' 'libpulse' 'pciutils'
         'desktop-file-utils' 'hicolor-icon-theme')
makedepends=('python' 'python2' 'gperf' 'mesa' 'ninja' 'nodejs' 'git' 'libva'
             'libpipewire02' 'clang' 'lld' 'gn' 'java-runtime-headless'
             'python2-setuptools')
optdepends=('libpipewire02: WebRTC desktop sharing under Wayland'
            'libva: hardware-accelerated video decode [experimental]'
            'kdialog: needed for file dialogs in KDE'
            'org.freedesktop.secrets: password storage backend on GNOME / Xfce'
            'kwallet: for storing passwords in KWallet on KDE desktops')
source=(https://commondatastorage.googleapis.com/chromium-browser-official/$pkgname-$pkgver.tar.xz
        https://github.com/foutrelis/chromium-launcher/archive/v$_launcher_ver/chromium-launcher-$_launcher_ver.tar.gz
        https://github.com/stha09/chromium-patches/releases/download/chromium-${pkgver%%.*}-patchset-$_gcc_patchset/chromium-${pkgver%%.*}-patchset-$_gcc_patchset.tar.xz
        chromium-glibc-2.33.patch
        subpixel-anti-aliasing-in-FreeType-2.8.1.patch
        chromium-88-BookmarkModelObserver-include.patch
        chromium-88-federated_learning-include.patch
        chromium-88-ityp-include.patch
        chromium-88-StringPool-include.patch
        chromium-88-vaapi-attribute.patch
        chromium-webrtc-r0.patch
        libc_malloc.patch
        llvm-remove-unsupported-compiler-warnings.patch
        musl-v8-monotonic-pthread-cont_timedwait.patch
        no-execinfo.patch
        no-getcontext.patch
        sandbox-membarrier.patch
        sandbox-sched_getparam.patch
        sndio.patch
        system-nodejs.patch
        time64.patch
        webrtc-include.patch
        webrtc-size_t.patch
        xxx-ppc64le-libvpx.patch
        xxx-ppc64le-support.patch
        xxx-ppc64le-swiftshader.patch)
sha256sums=('30411fc3ec2d33df4c5cad41f21affa3823c80f7dbd394f6d68f9a1e81015b81'
            '86859c11cfc8ba106a3826479c0bc759324a62150b271dd35d1a0f96e890f52f'
            'e5a60a4c9d0544d3321cc241b4c7bd4adb0a885f090c6c6c21581eac8e3b4ba9'
            '2fccecdcd4509d4c36af873988ca9dbcba7fdb95122894a9fdf502c33a1d7a4b'
            '1e2913e21c491d546e05f9b4edf5a6c7a22d89ed0b36ef692ca6272bcd5faec6'
            '785cc07060b19adfc6f967de32cfdabc012e83aba061fed93e166cb51490ba58'
            'ba716780e0d3572e76f2ef74d357c45fe65cb75eeeb14dc70d5a5cabec1955fe'
            'e59ac0ffd1eada94808268d4c9bd5e83cf140686606fb4d1ab200f31ee2d2ce8'
            'de5a64aa8b1ac177a0c05287cffa62002dd583e4388464197240c02fa0c31c45'
            '28ed1b686f985ecfffac56e840efd5e54ace000042fef210c71f1968262c586e'
            '5138c1bb7ee9b6179fd55819005b0aad08da58450fcb781cd7d215758821ec7f'
            '7af4fef8d77517b19417085f2832fae777850f7fda506a74f1d73437922cae73'
            '76affec1382008870b0fd6dd842ad73a8eabd16df773623f1b3431b82dbbfc27'
            '72d806af57a729d36b1eb482419245fba4c58d035fc20e58dbbcf88c35d50e97'
            '225691844d0860f9dcb961aa1f84397226dd6d3f3ba31f66fbfe89b9c2f5f3be'
            'bed6b515fecdcff2afe62859c1c0f3a51b381e4bd2ca76a29c1ed8834975748b'
            '3fd745785564c6d775a4f5874b90843b5d1040ba3c05e696c74fd883b8feea9a'
            '984f2430c4119c8ffc60776196a4ab63cd273e895c53c80a5bcc89fff54f5f08'
            'b65f63f333bb503f44e7939ca0887af8043b67108cb0777493504c6f6d86202d'
            '74bd1b5294ab40c1a32b65cd07c83b830320638ab2244f354db9dd1d772bd327'
            '1ea26a61d7a8e7f234c7655032b254de94619e6f5b17cdbb856f23549fcb2a48'
            '83c85907139060b7f80aa4c92b52f048bf714fcb8d5ec32f3dcc7abc84caaeef'
            '43a69dcba368b29f0445eade86b0d6e4e816ede1895f3642259354c94e62af98'
            '9af5aad8554c966542550f7467bb86d3a02d101aded4407f0a14ad289e47ee62'
            '3b7e0322b5b88167961461f4b99e0978b6b59ddd87e5f112a8f899c63baddde1'
            '92af4ffbfeb72964ec9bd4ab0f0565e942178aff2cb8bcd488d800912b235ba2')

# Possible replacements are listed in build/linux/unbundle/replace_gn_files.py
# Keys are the names in the above script; values are the dependencies in Arch
declare -gA _system_libs=(
  [ffmpeg]=ffmpeg
  [flac]=flac
  [fontconfig]=fontconfig
  [freetype]=freetype2
  [harfbuzz-ng]=harfbuzz
  [icu]=icu
  [libdrm]=
  [libjpeg]=libjpeg
  [libpng]=libpng
  #[libvpx]=libvpx
  [libwebp]=libwebp
  [libxml]=libxml2
  [libxslt]=libxslt
  [opus]=opus
  [re2]=re2
  [snappy]=snappy
  [zlib]=minizip
)
_unwanted_bundled_libs=(
  $(printf "%s\n" ${!_system_libs[@]} | sed 's/^libjpeg$/&_turbo/')
)
depends+=(${_system_libs[@]})

prepare() {
  cd "$srcdir/$pkgname-$pkgver"

  # Allow building against system libraries in official builds
  sed -i 's/OFFICIAL_BUILD/GOOGLE_CHROME_BUILD/' \
    tools/generate_shim_headers/generate_shim_headers.py

  # https://crbug.com/893950
  sed -i -e 's/\<xmlMalloc\>/malloc/' -e 's/\<xmlFree\>/free/' \
    third_party/blink/renderer/core/xml/*.cc \
    third_party/blink/renderer/core/xml/parser/xml_document_parser.cc \
    third_party/libxml/chromium/*.cc

  # https://crbug.com/1164975
  patch -Np1 -i ../chromium-glibc-2.33.patch

  # Upstream fixes
  patch -Np1 -d third_party/skia <../subpixel-anti-aliasing-in-FreeType-2.8.1.patch

  # Fixes for building with libstdc++ instead of libc++
  patch -Np1 -i ../patches/chromium-87-openscreen-include.patch
  patch -Np1 -i ../patches/chromium-88-CompositorFrameReporter-dcheck.patch
  patch -Np1 -i ../patches/chromium-88-ideographicSpaceCharacter.patch
  patch -Np1 -i ../patches/chromium-88-AXTreeFormatter-include.patch

  # Thanks Voidlinux!
  patch -Np0 -i ${srcdir}/chromium-88-BookmarkModelObserver-include.patch
  patch -Np0 -i ${srcdir}/chromium-88-federated_learning-include.patch
  patch -Np0 -i ${srcdir}/chromium-88-ityp-include.patch
  patch -Np0 -i ${srcdir}/chromium-88-StringPool-include.patch
  patch -Np0 -i ${srcdir}/chromium-88-vaapi-attribute.patch
  patch -Np0 -i ${srcdir}/chromium-webrtc-r0.patch
  patch -Np0 -i ${srcdir}/libc_malloc.patch
  patch -Np0 -i ${srcdir}/llvm-remove-unsupported-compiler-warnings.patch
  patch -Np0 -i ${srcdir}/musl-v8-monotonic-pthread-cont_timedwait.patch
  patch -Np0 -i ${srcdir}/no-execinfo.patch
  patch -Np0 -i ${srcdir}/no-getcontext.patch
  patch -Np0 -i ${srcdir}/sandbox-membarrier.patch
  patch -Np0 -i ${srcdir}/sandbox-sched_getparam.patch
  patch -Np0 -i ${srcdir}/sndio.patch
  patch -Np0 -i ${srcdir}/system-nodejs.patch
  patch -Np0 -i ${srcdir}/time64.patch
  patch -Np0 -i ${srcdir}/webrtc-include.patch
  patch -Np0 -i ${srcdir}/webrtc-size_t.patch
  patch -Np0 -i ${srcdir}/xxx-ppc64le-libvpx.patch
  patch -Np0 -i ${srcdir}/xxx-ppc64le-support.patch
  patch -Np0 -i ${srcdir}/xxx-ppc64le-swiftshader.patch

  # Force script incompatible with Python 3 to use /usr/bin/python2
  sed -i '1s|python$|&2|' third_party/dom_distiller_js/protoc_plugins/*.py

  mkdir -p third_party/node/linux/node-linux-ppc64le/bin
  ln -s /usr/bin/node third_party/node/linux/node-linux-ppc64le/bin/

  pushd third_party/libvpx
  mkdir -p source/config/linux/ppc64
  # need PATH to find gn
  PATH="${wrksrc}/out/Release:$PATH" ./generate_gni.sh
  popd

  # Remove bundled libraries for which we will use the system copies; this
  # *should* do what the remove_bundled_libraries.py script does, with the
  # added benefit of not having to list all the remaining libraries
  local _lib
  for _lib in ${_unwanted_bundled_libs[@]}; do
    find "third_party/$_lib" -type f \
      \! -path "third_party/$_lib/chromium/*" \
      \! -path "third_party/$_lib/google/*" \
      \! -path "third_party/harfbuzz-ng/utils/hb_scoped.h" \
      \! -regex '.*\.\(gn\|gni\|isolate\)' \
      -delete
  done

  python2 build/linux/unbundle/replace_gn_files.py \
    --system-libraries "${!_system_libs[@]}"
}

build() {
  make -C chromium-launcher-$_launcher_ver

  cd "$srcdir/$pkgname-$pkgver"

  if check_buildoption ccache y; then
    # Avoid falling back to preprocessor mode when sources contain time macros
    export CCACHE_SLOPPINESS=time_macros
  fi

  export CC=clang
  export CXX=clang++
  export AR=ar
  export NM=nm

  local _flags=(
    'custom_toolchain="//build/toolchain/linux/unbundle:default"'
    'host_toolchain="//build/toolchain/linux/unbundle:default"'
    'clang_use_chrome_plugins=false'
    'is_official_build=true' # implies is_cfi=true on x86_64
    'treat_warnings_as_errors=false'
    'fieldtrial_testing_like_official_build=true'
    'ffmpeg_branding="Chrome"'
    'proprietary_codecs=true'
    'rtc_use_pipewire=true'
    'link_pulseaudio=true'
    'use_gnome_keyring=false'
    'use_sysroot=false'
    'use_custom_libcxx=false'
    'enable_hangout_services_extension=true'
    'enable_widevine=true'
    'use_vaapi=true'
    'enable_nacl=false'
  )

  if [[ -n ${_system_libs[icu]+set} ]]; then
    _flags+=('icu_use_data_file=false')
  fi

  if check_option strip y; then
    _flags+=('symbol_level=0')
  fi

  # Facilitate deterministic builds (taken from build/config/compiler/BUILD.gn)
  CFLAGS+='   -Wno-builtin-macro-redefined'
  CXXFLAGS+=' -Wno-builtin-macro-redefined'
  CPPFLAGS+=' -D__DATE__=  -D__TIME__=  -D__TIMESTAMP__='

  # Do not warn about unknown warning options
  CFLAGS+='   -Wno-unknown-warning-option'
  CXXFLAGS+=' -Wno-unknown-warning-option'

  gn gen out/Release --args="${_flags[*]}" --script-executable=python2
  ninja -C out/Release chrome chrome_sandbox chromedriver
}

package() {
  cd chromium-launcher-$_launcher_ver
  make PREFIX=/usr DESTDIR="$pkgdir" install
  install -Dm644 LICENSE \
    "$pkgdir/usr/share/licenses/chromium/LICENSE.launcher"

  cd "$srcdir/$pkgname-$pkgver"

  install -D out/Release/chrome "$pkgdir/usr/lib/chromium/chromium"
  install -Dm4755 out/Release/chrome_sandbox "$pkgdir/usr/lib/chromium/chrome-sandbox"
  ln -s /usr/lib/chromium/chromedriver "$pkgdir/usr/bin/chromedriver"

  install -Dm644 chrome/installer/linux/common/desktop.template \
    "$pkgdir/usr/share/applications/chromium.desktop"
  install -Dm644 chrome/app/resources/manpage.1.in \
    "$pkgdir/usr/share/man/man1/chromium.1"
  sed -i \
    -e 's/@@MENUNAME@@/Chromium/g' \
    -e 's/@@PACKAGE@@/chromium/g' \
    -e 's/@@USR_BIN_SYMLINK_NAME@@/chromium/g' \
    "$pkgdir/usr/share/applications/chromium.desktop" \
    "$pkgdir/usr/share/man/man1/chromium.1"

  install -Dm644 chrome/installer/linux/common/chromium-browser/chromium-browser.appdata.xml \
    "$pkgdir/usr/share/metainfo/chromium.appdata.xml"
  sed -ni \
    -e 's/chromium-browser\.desktop/chromium.desktop/' \
    -e '/<update_contact>/d' \
    -e '/<p>/N;/<p>\n.*\(We invite\|Chromium supports Vorbis\)/,/<\/p>/d' \
    -e '/^<?xml/,$p' \
    "$pkgdir/usr/share/metainfo/chromium.appdata.xml"

  local toplevel_files=(
    chrome_100_percent.pak
    chrome_200_percent.pak
    resources.pak
    v8_context_snapshot.bin

    # ANGLE
    libEGL.so
    libGLESv2.so

    chromedriver
  )

  if [[ -z ${_system_libs[icu]+set} ]]; then
    toplevel_files+=(icudtl.dat)
  fi

  cp "${toplevel_files[@]/#/out/Release/}" "$pkgdir/usr/lib/chromium/"
  install -Dm644 -t "$pkgdir/usr/lib/chromium/locales" out/Release/locales/*.pak
  install -Dm755 -t "$pkgdir/usr/lib/chromium/swiftshader" out/Release/swiftshader/*.so

  for size in 24 48 64 128 256; do
    install -Dm644 "chrome/app/theme/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  for size in 16 32; do
    install -Dm644 "chrome/app/theme/default_100_percent/chromium/product_logo_$size.png" \
      "$pkgdir/usr/share/icons/hicolor/${size}x${size}/apps/chromium.png"
  done

  install -Dm644 LICENSE "$pkgdir/usr/share/licenses/chromium/LICENSE"
}

# vim:set ts=2 sw=2 et:
